[
{
	"uri": "/install/",
	"title": "Installation overview",
	"tags": [],
	"description": "",
	"content": "Overview  Set up vars Set up the inventory Execute site-preinstall playbook Execute site-install playbook Execute site-extras playbook (optional)  Set up vars.yml It is recommended to first start with a minimal configuration of only the necessities and then re-run the installation to enable the optional extras.\nA detailed description of each option is given in the vars-sample.yml file.\n A minimal configuration using the optional, but highly recommended, nsd(8) setup would be similar to:\nhostname: mail.aisha.cc admin: aisha domains: - name: aisha.cc nsd: true enable_nsd: true ipv4: 108.61.81.40 ipv6: 2001:19f0:5:36b:5400:2ff:fe7f:a634 secondary_nameservers: - ipv4: 69.65.50.192 # freedns2 - ipv4: 109.201.133.111 # rest are cloudns - ipv4: 209.58.140.85 - ipv4: 54.36.26.145 - ipv4: 185.206.180.104 - ipv4: 185.136.96.66 - ipv4: 185.136.97.66 - ipv4: 185.136.98.66 - ipv4: 185.136.99.66 - ipv4: 185.206.180.193 - ipv6: 2a00:1768:1001:9::31:1 - ipv6: 2605:fe80:2100:a013:7::1 - ipv6: 2a0b:1640:1:1:1:1:8ec:5a47 - ipv6: 2a06:fb00:1::1:66 - ipv6: 2a06:fb00:1::2:66 - ipv6: 2a06:fb00:1::3:66 - ipv6: 2a06:fb00:1::4:66 - ipv6: 2a0b:1640:1:3::1 public_nameservers: - name: freedns2 # freedns2 ipv4: 66.65.50.223 - name: pns31 # rest are cloudns ipv4: 185.136.96.66 ipv6: 2a06:fb00:1::1:66 - name: pns32 ipv4: 185.136.97.66 ipv6: 2a06:fb00:1::2:66 - name: pns33 ipv4: 185.136.98.66 ipv6: 2a06:fb00:1::3:66 - name: pns34 ipv4: 185.136.99.66 ipv6: 2a06:fb00:1::4:66 - name: ns31 ipv4: 109.201.133.111 ipv6: 2a00:1768:1001:9::31:1  - name: ns32 ipv4: 209.58.140.85 ipv6: 2605:fe80:2100:a013:7::1  - name: ns33 ipv4: 54.36.26.145 - name: ns34 ipv4: 185.206.180.104 ipv6: 2a0b:1640:1:1:1:1:8ec:5a47  Set up the inventory If you are running Ansible on the mail server, the default inventory-sample.ini should be enough. Just copy and rename the file to inventory.ini and it should work.\n[extraserver] extra ansible_connection=local ansible_python_interpreter=/usr/local/bin/python3 [mainserver] extra ansible_connection=local ansible_python_interpreter=/usr/local/bin/python3 [global:children] extraserver mainserver Execute site-preinstall playbook The first playbook to run is the site-preinstall.yml:\n$ ansible-playbook site-preinstall.yml This runs the following preliminary roles (in order) for a basic setup:\n pre-excision:  Installs the needed packages, custom scripts and creates configuration directories. Sets up system users and groups with minimal permissions.   base:  Set up logging, cron jobs and firewall.   nsd (optional, highly recommended):  Configure the DNS for all domains with nsd enabled.    It will take about 10-15 minutes after running the site-preinstall role for the DNS changes to be in effect. Running the site-install role too soon may cause it to abort as Lets Encrypt may not be able to find the websites.\n Execute site-install playbook The buld of the work is done in the site-install.yml playbook:\n$ ansible-playbook site-install.yml The following roles are run (in order):\n httpd:  Sets up the httpd(8) web server for all domains and subdomains.   acme:  Creates the SSL certificates with acme-client(1). Sets up the relayd(8) reverse proxy.   spamd (optional):  Sets up grey listing and tarpitting for spam protection.   rspamd:  Gives a lot of spam protection setup techniques. Enables DKIM signing for outgoing mails.   clamav (optional):  Sets up an antivirus which scans all attachments and emails. WARNING: this is quite heavy and may cripple smaller servers.   smtpd:  Finally sets up the actual OpenSMTPD MTA.   dovecot:  Sets up the IMAP/POP3 servers. Sets up the local MDA for virtuals users.    Execute site-extras playbook (optional) This enables extra functionality that is not inherently needed for an email server but has become ubiquitous for almost all email setups.\n$ ansible-playbook site-extra.yml This installs and configures (in order):\n php postgresql davical: Calendar + contacts server roundcube: Webmail server, along with a managesieve plugin for server side mail filtering.  "
},
{
	"uri": "/features/",
	"title": "Feature Highlights",
	"tags": [],
	"description": "",
	"content": "Security Email Calendar and Contacts System Management "
},
{
	"uri": "/overview/",
	"title": "System Overview",
	"tags": [],
	"description": "",
	"content": "Overview of the general system design principles and workings of Excision Mail\n"
},
{
	"uri": "/backups/",
	"title": "System Backups",
	"tags": [],
	"description": "",
	"content": "Important non-replaceable files These files are generated over time when using Excision and cannot be restored by the ansible scripts:\n# excision config files folder /etc/excision/ # excision-passwd home folder # - contains ssh keys of users /var/excision-passwd/ # excision user home folder # - contains important gpg keys /var/excision-home/ # published gpg keys of users /var/www/openpgpkey/ # and of course, the whole email folder /var/excision/ Example backup using restic Here is a sample configuration using restic which does a daily back up to a remote repo, using /etc/daily.local:\n# set up a restic repo somewhere which can be accessed # using your desired method RESTIC_REPO=\u0026#34;sftp:truenas:/mnt/Media/backups/mail.aisha.cc\u0026#34; env RESTIC_PASSWORD_FILE=\u0026#34;/root/.ssh/restic\u0026#34; \\ HOME=\u0026#34;/root\u0026#34; \\ /usr/local/bin/restic --repo ${RESTIC_REPO} \\ \t--verbose backup \\ \t--exclude-if-present=no_restic \\ \t--exclude-file=/etc/restic.exclude \\ \t--files-from=/etc/restic.include \\ \t--tag=\u0026#34;$(date +%c)\u0026#34; # list changes PREV=$(env RESTIC_PASSWORD_FILE=\u0026#34;/root/.ssh/restic\u0026#34; HOME=\u0026#34;/root\u0026#34; \\ \t/usr/local/bin/restic --repo ${RESTIC_REPO} \\ \tsnapshots --compact | tail -4 | head -1 | awk \u0026#39;{print $1}\u0026#39;) LAST=$(env RESTIC_PASSWORD_FILE=\u0026#34;/root/.ssh/restic\u0026#34; HOME=\u0026#34;/root\u0026#34; \\ \t/usr/local/bin/restic --repo ${RESTIC_REPO} \\ \tsnapshots --compact | tail -3 | head -1 | awk \u0026#39;{print $1}\u0026#39;) RDIFF_FILE=\u0026#34;/tmp/rdiff.${RANDOM}\u0026#34; env RESTIC_PASSWORD_FILE=\u0026#34;/root/.ssh/restic\u0026#34; HOME=\u0026#34;/root\u0026#34; \\ \t/usr/local/bin/restic --repo ${RESTIC_REPO} \\ \tdiff ${PREV} ${LAST} \u0026gt; ${RDIFF_FILE} NLINES=$(wc -l \u0026#34;${RDIFF_FILE}\u0026#34; | awk \u0026#39;{print $1}\u0026#39;) if [ $NLINES -gt 108 ] ; then head -n 100 ${RDIFF_FILE} printf \u0026#34;======= SNIP ======\\n\u0026#34; tail -n 8 ${RDIFF_FILE} else cat ${RDIFF_FILE} fi rm -f ${RDIFF_FILE} unset RDIFF_FILE RESTIC_REPO NLINES The recommended restic.include :\n/bin /etc /home /root /sbin /usr /var and /etc/restic.exclude :\n/var/run "
},
{
	"uri": "/guides/",
	"title": "Extra guides",
	"tags": [],
	"description": "",
	"content": "Guides not directly related to the base Excision Mail system\n"
},
{
	"uri": "/guides/secondary/",
	"title": "Secondary nameserver overview",
	"tags": [],
	"description": "",
	"content": "Secondary and Primary DNS explanations First let us look at the big picture of the stealth master configuration of a DNS server\n LARGE, SMALL, MEDIUM show the computing capabilities of the server.   ------------------- ----------------------- --------------------- | (SMALL) | NOTIFY | (MEDIUM) | (internal) | (LARGE) | | Personal | ---------------\u0026gt; | Secondary DNS |\u0026lt;------------\u0026gt;| Public facing | | VPS | \u0026lt;--------------- | server IP | | DNS server | | [ip1] | AXFR request | [ip2] | | [ip3] | ------------------- ----------------------- --------------------- | ^ | --------------------------------------------------- | | two way communication between VPS and user | | | | | | ------------------- primary NS query -------------- | | | (LARGE) | \u0026lt;--------------- | (USER) | domain ip query | | | Registrar | ---------------\u0026gt; | user | ------------------ | | | ip3 as primary | |\u0026lt;--------------------- ------------------- NS -------------- ip1 as address of domain Quick overview of DNS DNS stands for domain name server/system and is the first step in establishing communication with a host.\nDNS is the method to translate a name of the form https://openbsd.org to an ipv4 address, which can be of the form 129.128.5.194 or an ipv6 address, which is a lot more complex, of the form dead:beef.\nDNS flow overview A user does not necessarily store all the translation information in their local server.\nThe way a user gets this translation is by querying primary nameservers of the domain and making query for the ip of the domain.\nPrimary nameservers Primary nameservers are the one which answer the users query for the ip of a domain.\nThese are queried millions of times a second from different places for different domains, hence they are hosted on highly powerful computers.\nFor the first step, even before communicating with the server, the user must know the ip address of the primary nameservers.\nThe user gets the primary nameserver by querying different registrars for the primary nameserver of a domain.\nThere are a lot of registrars and they have their own methods of making sure that the information between registrars is in sync. Typically, you update the ip addresses of the primary nameservers at your registrar, where you bought the domain name from, and this information is synced all throughout the world very soon (we don\u0026rsquo;t cover explaining recursive dns and other complex things here).\nThis way it is fairly fast for a user to get the primary nameservers of your domain.\nSecondary nameservers But how does the primary nameserver get the information?\nThe answer to that is the stealth master configuration.\nThe DNS service provider will query your personal VPS for all the information and then will start answering the queries of users.\nBut the DNS provider does not do this through the same servers that it answers queries from.\nIt is done via other medium sized servers, which are called secondary nameservers, who query your VPS in two ways\n Either by doing queries periodically, or Your VPS sends a notification (NOTIFY) to the secondary nameserver, informing them that some change has happened and it should query you asap.  The second method is called the NOTIFY from your VPS to the secondary DNS.\nHence it is vital to get the DNS service from a provider who supports the NOTIFY protocol.\nThe query made by the secondary nameserver is called a zone transfer, AXFR, query, wherein it asks your VPS for the full zone file of the domain.\nThis method to query for the zone file of a domain from a computer has been exploited to do DDOS attacks and needs careful adjustment to only allow the proper IPs to make AXFR requests.\nNow the DNS providers secondary nameserver will take your zone file and then update the public facing nameservers fairly soon (typically \u0026lt;5 mins).\nStealth master For the DNS provider to get the full zone info, it first needs the IP address of your VPS. This is one of the reasons why hosting services at home is a tough situation as your home address is fairly fickle.\nHence your VPS is the master provider of the DNS information, but because it is a small server, we delegate the responsibility to answer the users queries to the LARGE servers from your DNS service provider.\nNone of the users ever know that the actual authoritative information is coming stored in a different location, your VPS server, hence it is called a stealth master.\nExcision setup Excision does this automatically provided that you give the ip2 and ip3 in the configuration.\n ip2 - This is the address that is allowed to make AXFR requests and also the address that NOTIFY updates are sent to ip3 - This is added in the zone file for a cross check with your registrar to make sure that the proper nameservers are used.  Typically, when you buy a DNS service, they will have the information of the public facing nameservers and the secondary namerservers, somewhere in their web ui.\nJust take the two lists of ip addresses and add them in the appropriate place in the vars.yml file.\n"
},
{
	"uri": "/guides/freedns/",
	"title": "FreeDNS setup",
	"tags": [],
	"description": "",
	"content": "FreeDNS (afraid.org) Example setup for stealth master configuration using freedns.afraid.org\nFreeDNS configuration First make an account on FreeDNS and then go to add backup dns:\nhttps://freedns.afraid.org/secondary/add.php\n  Secondary servers The information related to secondary nameservers is available on their website: https://freedns.afraid.org/secondary/instructions.php\n  NOTE: This still hasn\u0026rsquo;t given you the ip of ns2.afraid.org. You should poke around on their website to find the relevant information or use the `host` command on OpenBSD to get the ip addresses of ns2.afraid.org ``` $ host ns2.afraid.org ns2.afraid.org has address 69.65.50.223 ns2.afraid.org has IPv6 address 2001:1850:1:5:800::6b ```\nRegistrar configuration (namecheap) You can set up the configuration at your registrar, depending on your provider. E.g. on NameCheap:\n  Excision configuration A full vars.yml file as an example is:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74  domain: aisha.cc hostname: mail admin: aisha additional_domains: - name: epsilonknot.xyz - name: bsd.ac nsd: true private_interface: tun0 # ip1 ipv4: 108.61.81.40 ipv6: 2001:19f0:5:36b:5400:2ff:fe7f:a634 enable_clamav: true enable_spamd: true enable_nsd: true username_delimiter: \u0026#34;.\u0026#34; rspamd_enable_pretrain: true additional_udp_ports: - 161 # ip2 secondary_nameservers: - ipv4: 69.65.50.192 # freedns2 - ipv6: 2001:1850:1:5:800::6b # freedns2 - ipv4: 109.201.133.111 # ALL rest are cloudns - ipv4: 209.58.140.85 - ipv4: 54.36.26.145 - ipv4: 185.206.180.104 - ipv4: 185.136.96.66 - ipv4: 185.136.97.66 - ipv4: 185.136.98.66 - ipv4: 185.136.99.66 - ipv4: 185.206.180.193 - ipv6: 2a00:1768:1001:9::31:1 - ipv6: 2605:fe80:2100:a013:7::1 - ipv6: 2a0b:1640:1:1:1:1:8ec:5a47 - ipv6: 2a06:fb00:1::1:66 - ipv6: 2a06:fb00:1::2:66 - ipv6: 2a06:fb00:1::3:66 - ipv6: 2a06:fb00:1::4:66 - ipv6: 2a0b:1640:1:3::1 # ip3 public_nameservers: - name: freedns2 # this is freedns2 ipv4: 66.65.50.223 ipv6: 2001:1850:1:5:800::6b - name: pns31 # ALL are cloudns ipv4: 185.136.96.66 ipv6: 2a06:fb00:1::1:66 - name: pns32 ipv4: 185.136.97.66 ipv6: 2a06:fb00:1::2:66 - name: pns33 ipv4: 185.136.98.66 ipv6: 2a06:fb00:1::3:66 - name: pns34 ipv4: 185.136.99.66 ipv6: 2a06:fb00:1::4:66 - name: ns31 ipv4: 109.201.133.111 ipv6: 2a00:1768:1001:9::31:1 - name: ns32 ipv4: 209.58.140.85 ipv6: 2605:fe80:2100:a013:7::1 - name: ns33 ipv4: 54.36.26.145 - name: ns34 ipv4: 185.206.180.104 ipv6: 2a0b:1640:1:1:1:1:8ec:5a47   "
},
{
	"uri": "/guides/manualdns/",
	"title": "Manual DNS setup",
	"tags": [],
	"description": "",
	"content": "If for some reason you have decided to not enable_nsd and want to do it manually, I have outlined the necessary steps for creating records at your DNS provider.\nAssumptions  Your domain name: pdomain.abc (for primary domain) You have configured an A record for excision.pdomain.abc, so that it points to the current server. Your host server has reverse DNS resolving to excision.pdomain.abc. You are configuring dns for a secondary domain sdomain.xyz.\n(It does not need to be secondary, sdomain.xyz could be the same as pdomain.abc)  TTL is the default ttl you would like to put, in Excision it is set to 10800.\nCNAME records for sdomain.xyz autoconfig.sdomain.xyz. TTL IN CNAME excision.pdomain.abc. autodiscover.sdomain.xyz. TTL IN CNAME excision.pdomain.abc. openpgpkey.sdomain.xyz. TTL IN CNAME excision.pdomain.abc. wkd.sdomain.xyz. TTL IN CNAME excision.pdomain.abc. mta-sts.sdomain.xyz. TTL IN CNAME excision.pdomain.abc. imap.sdomain.xyz. TTL IN CNAME excision.pdomain.abc. pop3.sdomain.xyz. TTL IN CNAME excision.pdomain.abc. smtp.sdomain.xyz. TTL IN CNAME excision.pdomain.abc. webmail.sdomain.xyz. TTL IN CNAME excision.pdomain.abc. calendar.sdomain.xyz. TTL IN CNAME excision.pdomain.abc. contacts.sdomain.xyz. TTL IN CNAME excision.pdomain.abc. MX records for sdomain.xyz @ TTL IN MX 0 excision.pdomain.abc. This tells the world that the mail for sdomain.xyz is handled by excision.pdomain.abc\nTXT records for sdomain.xyz sdomain.xyz. TTL IN TXT \u0026quot;v=spf1 mx:pdomain.abc -all\u0026quot; _dmarc.sdomain.xyz. TTL IN TXT \u0026quot;v=DMARC1;p=reject;pct=100;rua=mailto:dmarcreports@pdomain.abc\u0026quot; _smtp._tls.sdomain.xyz. TTL IN TXT \u0026quot;v=TLSRPTv1;rua=mailto:tlsreports@pdomain.abc;\u0026quot; excision._domainkey.sdomain.xyz. TTL IN TXT \u0026quot;v=DKIM1;k=rsa;p={EXCISIONKEY}\u0026quot; where {EXCISIONKEY} is the key stored in /etc/excision/dkim/excision.pdomain.abc.pub and /etc/excision/dkim/excision.pdomain.abc.txt.\nNOTE: Depending on your DNS provider the key generated by Excision is going to be too large to fit in one record. You will have to contact your DNS provider to see how to fit a large key into a TXT record. The work around this is to store more than one string in a DNS record (yes, this is possible to do, but the implementation depends on your hosting providers UI).\nExcision breaks down the record into correct sizes and stores it in the text files above.\n( \u0026quot;v=DKIM1;k=rsa;p=OQWcn812jW...\u0026quot; \u0026quot;....UnsdU;\u0026quot; ) SRV records for sdomain.xyz Needed for setting up older client software (and also Microsoft/iOS)\n_submissions._tcp.sdomain.xyz. TTL IN SRV 0 1 465 smtp.sdomain.xyz. _submission._tcp.sdomain.xyz. TTL IN SRV 0 1 587 smtp.sdomain.xyz. _imaps._tcp.sdomain.xyz. TTL IN SRV 0 1 993 imap.sdomain.xyz. _pop3s._tcp.sdomain.xyz. TTL IN SRV 0 1 995 pop3.sdomain.xyz. _imap._tcp.sdomain.xyz. TTL IN SRV 0 0 0 . (OPTIONAL, depending on DNS provider compatibility) _pop3._tcp.sdomain.xyz. TTL IN SRV 0 0 0 . (OPTIONAL, depending on DNS provider compatibility) Extra SRV records for setting up openpgpkey using GnuPG _openpgpkey._tcp.sdomain.xyz. TTL IN SRV 0 0 443 wkd.sdomain.xyz. SRV records for autodiscover in Microsoft _autodiscover._tcp.sdomain.xyz. TTL IN SRV 0 0 443 autodiscover.sdomain.xyz. "
},
{
	"uri": "/",
	"title": "Excision Mail",
	"tags": [],
	"description": "",
	"content": "Excision Mail Fullstack, security focused mailserver based on OpenSMTPD for OpenBSD.\nWebsite is still a WIP but feel free to explore and give feedback.\n "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/main/",
	"title": "main",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]